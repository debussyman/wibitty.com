/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gtfs$realtime_pb = require('./gtfs-realtime_pb.js');
goog.exportSymbol('proto.NyctFeedHeader', null, global);
goog.exportSymbol('proto.NyctStopTimeUpdate', null, global);
goog.exportSymbol('proto.NyctTripDescriptor', null, global);
goog.exportSymbol('proto.NyctTripDescriptor.Direction', null, global);
goog.exportSymbol('proto.TripReplacementPeriod', null, global);
goog.exportSymbol('proto.nyctFeedHeader', null, global);
goog.exportSymbol('proto.nyctStopTimeUpdate', null, global);
goog.exportSymbol('proto.nyctTripDescriptor', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TripReplacementPeriod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TripReplacementPeriod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TripReplacementPeriod.displayName = 'proto.TripReplacementPeriod';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TripReplacementPeriod.prototype.toObject = function(opt_includeInstance) {
  return proto.TripReplacementPeriod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TripReplacementPeriod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TripReplacementPeriod.toObject = function(includeInstance, msg) {
  var f, obj = {
    routeId: jspb.Message.getField(msg, 1),
    replacementPeriod: (f = msg.getReplacementPeriod()) && gtfs$realtime_pb.TimeRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TripReplacementPeriod}
 */
proto.TripReplacementPeriod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TripReplacementPeriod;
  return proto.TripReplacementPeriod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TripReplacementPeriod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TripReplacementPeriod}
 */
proto.TripReplacementPeriod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteId(value);
      break;
    case 2:
      var value = new gtfs$realtime_pb.TimeRange;
      reader.readMessage(value,gtfs$realtime_pb.TimeRange.deserializeBinaryFromReader);
      msg.setReplacementPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TripReplacementPeriod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TripReplacementPeriod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TripReplacementPeriod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TripReplacementPeriod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReplacementPeriod();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      gtfs$realtime_pb.TimeRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional string route_id = 1;
 * @return {string}
 */
proto.TripReplacementPeriod.prototype.getRouteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TripReplacementPeriod.prototype.setRouteId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TripReplacementPeriod.prototype.clearRouteId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TripReplacementPeriod.prototype.hasRouteId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional transit_realtime.TimeRange replacement_period = 2;
 * @return {?proto.transit_realtime.TimeRange}
 */
proto.TripReplacementPeriod.prototype.getReplacementPeriod = function() {
  return /** @type{?proto.transit_realtime.TimeRange} */ (
    jspb.Message.getWrapperField(this, gtfs$realtime_pb.TimeRange, 2));
};


/** @param {?proto.transit_realtime.TimeRange|undefined} value */
proto.TripReplacementPeriod.prototype.setReplacementPeriod = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TripReplacementPeriod.prototype.clearReplacementPeriod = function() {
  this.setReplacementPeriod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TripReplacementPeriod.prototype.hasReplacementPeriod = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NyctFeedHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NyctFeedHeader.repeatedFields_, null);
};
goog.inherits(proto.NyctFeedHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NyctFeedHeader.displayName = 'proto.NyctFeedHeader';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NyctFeedHeader.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NyctFeedHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.NyctFeedHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NyctFeedHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NyctFeedHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    nyctSubwayVersion: jspb.Message.getField(msg, 1),
    tripReplacementPeriodList: jspb.Message.toObjectList(msg.getTripReplacementPeriodList(),
    proto.TripReplacementPeriod.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NyctFeedHeader}
 */
proto.NyctFeedHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NyctFeedHeader;
  return proto.NyctFeedHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NyctFeedHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NyctFeedHeader}
 */
proto.NyctFeedHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNyctSubwayVersion(value);
      break;
    case 2:
      var value = new proto.TripReplacementPeriod;
      reader.readMessage(value,proto.TripReplacementPeriod.deserializeBinaryFromReader);
      msg.addTripReplacementPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NyctFeedHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NyctFeedHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NyctFeedHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NyctFeedHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTripReplacementPeriodList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TripReplacementPeriod.serializeBinaryToWriter
    );
  }
};


/**
 * required string nyct_subway_version = 1;
 * @return {string}
 */
proto.NyctFeedHeader.prototype.getNyctSubwayVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NyctFeedHeader.prototype.setNyctSubwayVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.NyctFeedHeader.prototype.clearNyctSubwayVersion = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NyctFeedHeader.prototype.hasNyctSubwayVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TripReplacementPeriod trip_replacement_period = 2;
 * @return {!Array.<!proto.TripReplacementPeriod>}
 */
proto.NyctFeedHeader.prototype.getTripReplacementPeriodList = function() {
  return /** @type{!Array.<!proto.TripReplacementPeriod>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TripReplacementPeriod, 2));
};


/** @param {!Array.<!proto.TripReplacementPeriod>} value */
proto.NyctFeedHeader.prototype.setTripReplacementPeriodList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TripReplacementPeriod=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TripReplacementPeriod}
 */
proto.NyctFeedHeader.prototype.addTripReplacementPeriod = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TripReplacementPeriod, opt_index);
};


proto.NyctFeedHeader.prototype.clearTripReplacementPeriodList = function() {
  this.setTripReplacementPeriodList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NyctTripDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NyctTripDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NyctTripDescriptor.displayName = 'proto.NyctTripDescriptor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NyctTripDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.NyctTripDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NyctTripDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NyctTripDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    trainId: jspb.Message.getField(msg, 1),
    isAssigned: jspb.Message.getField(msg, 2),
    direction: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NyctTripDescriptor}
 */
proto.NyctTripDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NyctTripDescriptor;
  return proto.NyctTripDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NyctTripDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NyctTripDescriptor}
 */
proto.NyctTripDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrainId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAssigned(value);
      break;
    case 3:
      var value = /** @type {!proto.NyctTripDescriptor.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NyctTripDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NyctTripDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NyctTripDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NyctTripDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {!proto.NyctTripDescriptor.Direction} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.NyctTripDescriptor.Direction = {
  NORTH: 1,
  EAST: 2,
  SOUTH: 3,
  WEST: 4
};

/**
 * optional string train_id = 1;
 * @return {string}
 */
proto.NyctTripDescriptor.prototype.getTrainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NyctTripDescriptor.prototype.setTrainId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.NyctTripDescriptor.prototype.clearTrainId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NyctTripDescriptor.prototype.hasTrainId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_assigned = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.NyctTripDescriptor.prototype.getIsAssigned = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.NyctTripDescriptor.prototype.setIsAssigned = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.NyctTripDescriptor.prototype.clearIsAssigned = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NyctTripDescriptor.prototype.hasIsAssigned = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Direction direction = 3;
 * @return {!proto.NyctTripDescriptor.Direction}
 */
proto.NyctTripDescriptor.prototype.getDirection = function() {
  return /** @type {!proto.NyctTripDescriptor.Direction} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {!proto.NyctTripDescriptor.Direction} value */
proto.NyctTripDescriptor.prototype.setDirection = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.NyctTripDescriptor.prototype.clearDirection = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NyctTripDescriptor.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NyctStopTimeUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NyctStopTimeUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NyctStopTimeUpdate.displayName = 'proto.NyctStopTimeUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NyctStopTimeUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.NyctStopTimeUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NyctStopTimeUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NyctStopTimeUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheduledTrack: jspb.Message.getField(msg, 1),
    actualTrack: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NyctStopTimeUpdate}
 */
proto.NyctStopTimeUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NyctStopTimeUpdate;
  return proto.NyctStopTimeUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NyctStopTimeUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NyctStopTimeUpdate}
 */
proto.NyctStopTimeUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheduledTrack(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActualTrack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NyctStopTimeUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NyctStopTimeUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NyctStopTimeUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NyctStopTimeUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string scheduled_track = 1;
 * @return {string}
 */
proto.NyctStopTimeUpdate.prototype.getScheduledTrack = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NyctStopTimeUpdate.prototype.setScheduledTrack = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.NyctStopTimeUpdate.prototype.clearScheduledTrack = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NyctStopTimeUpdate.prototype.hasScheduledTrack = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string actual_track = 2;
 * @return {string}
 */
proto.NyctStopTimeUpdate.prototype.getActualTrack = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NyctStopTimeUpdate.prototype.setActualTrack = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.NyctStopTimeUpdate.prototype.clearActualTrack = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NyctStopTimeUpdate.prototype.hasActualTrack = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `nyctFeedHeader`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.NyctFeedHeader>}
 */
proto.nyctFeedHeader = new jspb.ExtensionFieldInfo(
    1001,
    {nyctFeedHeader: 0},
    proto.NyctFeedHeader,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.NyctFeedHeader.toObject),
    0);

gtfs$realtime_pb.FeedHeader.extensionsBinary[1001] = new jspb.ExtensionFieldBinaryInfo(
    proto.nyctFeedHeader,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.NyctFeedHeader.serializeBinaryToWriter,
    proto.NyctFeedHeader.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
gtfs$realtime_pb.FeedHeader.extensions[1001] = proto.nyctFeedHeader;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `nyctTripDescriptor`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.NyctTripDescriptor>}
 */
proto.nyctTripDescriptor = new jspb.ExtensionFieldInfo(
    1001,
    {nyctTripDescriptor: 0},
    proto.NyctTripDescriptor,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.NyctTripDescriptor.toObject),
    0);

gtfs$realtime_pb.TripDescriptor.extensionsBinary[1001] = new jspb.ExtensionFieldBinaryInfo(
    proto.nyctTripDescriptor,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.NyctTripDescriptor.serializeBinaryToWriter,
    proto.NyctTripDescriptor.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
gtfs$realtime_pb.TripDescriptor.extensions[1001] = proto.nyctTripDescriptor;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `nyctStopTimeUpdate`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.NyctStopTimeUpdate>}
 */
proto.nyctStopTimeUpdate = new jspb.ExtensionFieldInfo(
    1001,
    {nyctStopTimeUpdate: 0},
    proto.NyctStopTimeUpdate,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.NyctStopTimeUpdate.toObject),
    0);

gtfs$realtime_pb.TripUpdate.StopTimeUpdate.extensionsBinary[1001] = new jspb.ExtensionFieldBinaryInfo(
    proto.nyctStopTimeUpdate,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.NyctStopTimeUpdate.serializeBinaryToWriter,
    proto.NyctStopTimeUpdate.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
gtfs$realtime_pb.TripUpdate.StopTimeUpdate.extensions[1001] = proto.nyctStopTimeUpdate;

goog.object.extend(exports, proto);
